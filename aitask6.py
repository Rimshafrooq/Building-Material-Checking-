# -*- coding: utf-8 -*-
"""Aitask6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HsoFSQJVrBOHT0uhfbzUMfmCWUZEBjQt
"""

# Constants
COST_CEMENT = 3
COST_GRAVEL = 2
COST_SAND = 2
DISCOUNT_PACK_CEMENT = 1
DISCOUNT_PACK_SAND = 2
DISCOUNT_PACK_GRAVEL = 2
DISCOUNT_PACK_PRICE = 10

# Function to check a single sack
def check_single_sack():
    # Input and store weight and contents for one sack
    weight = float(input("Enter the weight of the sack (in kilograms): "))
    contents = input("Enter the contents of the sack (C for cement, G for gravel, S for sand): ").upper()

    # Check contents and weight
    if contents in ['C', 'G', 'S']:
        if (contents == 'C' and 24.9 < weight < 25.1) or \
           (contents in ['G', 'S'] and 49.9 < weight < 50.1):
            print("\nAccepted Sack:")
            print(f"Contents: {contents}")
            print(f"Weight: {weight} kilograms")
        else:
            print("\nRejected Sack:")
            print("Reason(s):")
            if contents == 'C':
                print("Cement weight must be between 24.9 and 25.1 kilograms.")
            else:
                print("Gravel or sand weight must be between 49.9 and 50.1 kilograms.")
    else:
        print("\nRejected Sack:")
        print("Reason(s):")
        print("Invalid contents. Please enter C for cement, G for gravel, or S for sand.")

# Function to check a customer's order
def check_customer_order():
    total_weight = 0
    sacks_rejected = 0

    # Input and store the number of sacks of each type required for the order
    num_cement = int(input("Enter the number of sacks of cement: "))
    num_gravel = int(input("Enter the number of sacks of gravel: "))
    num_sand = int(input("Enter the number of sacks of sand: "))

    # Check contents and weight for each sack in the order
    print("\nChecking Order:")
    for _ in range(num_cement):
        result = check_single_sack()
        if "Rejected" in result:
            sacks_rejected += 1
        else:
            total_weight += result.split('\n')[3].split(": ")[1].split(" ")[0]

    for _ in range(num_gravel):
        result = check_single_sack()
        if "Rejected" in result:
            sacks_rejected += 1
        else:
            total_weight += result.split('\n')[3].split(": ")[1].split(" ")[0]

    for _ in range(num_sand):
        result = check_single_sack()
        if "Rejected" in result:
            sacks_rejected += 1
        else:
            total_weight += result.split('\n')[3].split(": ")[1].split(" ")[0]

    # Output total weight of the order and number of sacks rejected
    print("\nTotal Weight of the Order:", total_weight, "kilograms")
    print("Number of Sacks Rejected from the Order:", sacks_rejected)

    return total_weight, sacks_rejected

# Function to calculate the price for a customer's order
def calculate_order_price(total_weight, sacks_rejected):
    # Calculate regular price for the order
    regular_price = (COST_CEMENT * num_cement) + (COST_GRAVEL * num_gravel) + (COST_SAND * num_sand)

    # Check how many discount packs are in the order
    num_discount_packs = min(num_cement // DISCOUNT_PACK_CEMENT,
                             num_gravel // DISCOUNT_PACK_GRAVEL,
                             num_sand // DISCOUNT_PACK_SAND)

    # Calculate new price and amount saved if a discount price applies
    new_price = regular_price - (num_discount_packs * DISCOUNT_PACK_PRICE)
    amount_saved = regular_price - new_price

    # Output prices and savings
    print("\nRegular Price for the Order: $", regular_price)
    print("Discount Packs Applied:", num_discount_packs)
    print("New Price for the Order: $", new_price)
    print("Amount Saved: $", amount_saved)

# Test Task 1
print("Task 1 - Check a single sack:")
check_single_sack()

# Test Task 2
print("\nTask 2 - Check a customer's order:")
total_weight, sacks_rejected = check_customer_order()

# Test Task 3
print("\nTask 3 - Calculate the price for a customer's order:")
calculate_order_price(total_weight, sacks_rejected)

